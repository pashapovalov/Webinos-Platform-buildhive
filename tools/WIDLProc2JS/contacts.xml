<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Definitions SYSTEM "widlprocxml.dtd">
<Definitions>
  <Module name="ContactsWrapper" id="::ContactsWrapper">
    <webidl>module ContactsWrapper {&#13;
&#13;
         [NoInterfaceObject]&#13;
        interface ContactError {&#13;
&#13;
            const unsigned short UNKNOWN_ERROR = 0;&#13;
&#13;
            const unsigned short INVALID_ARGUMENT_ERROR = 1;&#13;
&#13;
            const unsigned short TIMEOUT_ERROR = 2;&#13;
&#13;
            const unsigned short PENDING_OPERATION_ERROR = 3;&#13;
&#13;
            const unsigned short IO_ERROR = 4;&#13;
&#13;
            const unsigned short NOT_SUPPORTED_ERROR = 5;&#13;
&#13;
            const unsigned short PERMISSION_DENIED_ERROR = 20;&#13;
&#13;
            readonly attribute unsigned short code;&#13;
        };&#13;
        &#13;
        &#13;
&#13;
        [NoInterfaceObject]&#13;
        interface ServiceContacts {&#13;
&#13;
                    readonly attribute <ref>Contacts</ref> contacts;&#13;
        };  &#13;
        &#13;
&#13;
        &#13;
        [NoInterfaceObject]&#13;
        interface Contacts {&#13;
&#13;
&#13;
            caller void find (DOMString[] fields, <ref>ContactFindCB</ref> successCB, optional <ref>ContactErrorCB</ref> errorCB, optional <ref>ContactFindOptions</ref> options);&#13;
        };&#13;
  &#13;
&#13;
&#13;
&#13;
        [NoInterfaceObject]&#13;
        interface Contact {&#13;
                        &#13;
&#13;
             readonly attribute DOMString              id;&#13;
&#13;
             attribute DOMString?             displayName;&#13;
&#13;
             attribute  <ref>ContactName</ref>           name;&#13;
&#13;
             attribute DOMString?             nickname;&#13;
&#13;
             attribute <ref>ContactField</ref>[]?        phoneNumbers;&#13;
&#13;
             attribute <ref>ContactField</ref>[]?        emails;&#13;
&#13;
             attribute <ref>ContactAddress</ref>[]?      addresses;&#13;
&#13;
             attribute <ref>ContactField</ref>[]?        ims;&#13;
&#13;
             attribute <ref>ContactOrganization</ref>[]? organizations;&#13;
&#13;
             attribute <ref>Date</ref>?                  revision;&#13;
&#13;
             attribute <ref>Date</ref>?                  birthday;&#13;
&#13;
             attribute DOMString?             gender;&#13;
&#13;
             attribute DOMString?             note;&#13;
&#13;
             attribute <ref>ContactField</ref>[]?        photos;&#13;
&#13;
             attribute DOMString[]?           categories;&#13;
&#13;
             attribute <ref>ContactField</ref>[]?        urls;&#13;
&#13;
             attribute DOMString?             timezone;&#13;
        };&#13;
        &#13;
&#13;
      [NoInterfaceObject]&#13;
        interface ContactName {&#13;
&#13;
            attribute DOMString? formatted;&#13;
&#13;
            attribute DOMString? familyName;&#13;
&#13;
            attribute DOMString? givenName;&#13;
&#13;
            attribute DOMString? middleName;&#13;
&#13;
            attribute DOMString? honorificPrefix;&#13;
&#13;
            attribute DOMString? honorificSuffix;&#13;
        };&#13;
&#13;
        &#13;
&#13;
        [NoInterfaceObject]&#13;
        interface ContactField {&#13;
&#13;
            attribute DOMString  type;&#13;
&#13;
            attribute DOMString? value;&#13;
&#13;
            attribute boolean    pref;&#13;
        };&#13;
        &#13;
        &#13;
&#13;
        [NoInterfaceObject]&#13;
        interface ContactAddress {&#13;
&#13;
            attribute boolean    pref;&#13;
&#13;
            attribute DOMString? type;&#13;
&#13;
            attribute DOMString? formatted;&#13;
&#13;
            attribute DOMString? streetAddress;&#13;
&#13;
            attribute DOMString? locality;&#13;
&#13;
            attribute DOMString? region;&#13;
&#13;
            attribute DOMString? postalCode;&#13;
&#13;
            attribute DOMString? country;&#13;
        };&#13;
     &#13;
&#13;
     [NoInterfaceObject]&#13;
        interface ContactOrganization {&#13;
&#13;
            attribute boolean    pref;&#13;
&#13;
            attribute DOMString? type;&#13;
&#13;
            attribute DOMString? name;&#13;
&#13;
            attribute DOMString? department;&#13;
&#13;
            attribute DOMString? title;&#13;
        };&#13;
        &#13;
&#13;
        [NoInterfaceObject]&#13;
        interface ContactFindOptions {&#13;
&#13;
            attribute DOMString? filter;&#13;
&#13;
            attribute boolean?   multiple;&#13;
&#13;
            attribute <ref>Date</ref>      updatedSince;&#13;
        };&#13;
&#13;
&#13;
        [Callback=FunctionOnly, NoInterfaceObject]&#13;
        interface ContactFindCB {        &#13;
&#13;
            void onsuccess (<ref>Contact</ref>[] contactObjs);&#13;
        };&#13;
        &#13;
&#13;
        [Callback=FunctionOnly, NoInterfaceObject]&#13;
        interface ContactErrorCB  {        &#13;
&#13;
              void onerror (<ref>ContactError</ref> error);&#13;
        };&#13;
        &#13;
};</webidl>
    <descriptive>
        <brief>
 W3C based Contacts interface. 
        </brief>
       <description>
        <p>
This specification provides a wrapper that mandates the use of the 
<a href="http://www.w3.org/TR/2011/WD-contacts-api-20110616/">W3C Contacts API </a> (Editor's draft 16th June).
        </p>
        <p>
The Contacts API defines the high-level interfaces required to obtain read access to a user's unified address book.
        </p>
        <p>
This API includes the following key interfaces:
        </p>
        <p>
A Contacts interface, which provides the method needed to access a user's unified address book.
A Contact interface, which captures the individual contact information that can be returned following a successful read operation.
        </p>
        <p>
Note that while the W3C version, on which this specification is based on, provides only the ServiceContacts
to retrieve contacts, in webinos contacts can also be retrieved using the findServices method of the
Service Discovery API.
        </p>
       </description>
        <def-api-feature identifier="http://www.w3.org/ns/api-perms/contacts.read">
          <descriptive>
           <description>
 
Read access to the address book.
           </description>
          </descriptive>
        </def-api-feature>
        <author>
 W3C Editor's Draft 16 June 2011
        </author>
        <author>
 Normative: <a href="http://www.w3.org/TR/2011/WD-contacts-api-20110616/">W3C Contacts API </a> 
        </author>
        <author>
 WIDL version for webinos created by Christian Fuhrhop &#60;christian.fuhrhop@fokus.fraunhofer.de&#62;
        </author>
        <version>
 1.0
        </version>
    </descriptive>
    <Interface name="ContactError" id="::ContactsWrapper::ContactError">
      <webidl>         [NoInterfaceObject]&#13;
        interface ContactError {&#13;
&#13;
            const unsigned short UNKNOWN_ERROR = 0;&#13;
&#13;
            const unsigned short INVALID_ARGUMENT_ERROR = 1;&#13;
&#13;
            const unsigned short TIMEOUT_ERROR = 2;&#13;
&#13;
            const unsigned short PENDING_OPERATION_ERROR = 3;&#13;
&#13;
            const unsigned short IO_ERROR = 4;&#13;
&#13;
            const unsigned short NOT_SUPPORTED_ERROR = 5;&#13;
&#13;
            const unsigned short PERMISSION_DENIED_ERROR = 20;&#13;
&#13;
            readonly attribute unsigned short code;&#13;
        };</webidl>
      <descriptive>
          <brief>
 Contacts specific errors.
          </brief>
      </descriptive>
      <ExtendedAttributeList>
        <ExtendedAttribute name="NoInterfaceObject"/>
      </ExtendedAttributeList>
      <Const name="UNKNOWN_ERROR" value="0" id="::ContactsWrapper::ContactError::UNKNOWN_ERROR">
        <webidl>            const unsigned short UNKNOWN_ERROR = 0;</webidl>
        <descriptive>
            <brief>
 An unknown error occurred.
            </brief>
        </descriptive>
        <Type type="unsigned short"/>
      </Const>
      <Const name="INVALID_ARGUMENT_ERROR" value="1" id="::ContactsWrapper::ContactError::INVALID_ARGUMENT_ERROR">
        <webidl>            const unsigned short INVALID_ARGUMENT_ERROR = 1;</webidl>
        <descriptive>
            <brief>
 An invalid parameter was provided when the requested method was invoked.
            </brief>
        </descriptive>
        <Type type="unsigned short"/>
      </Const>
      <Const name="TIMEOUT_ERROR" value="2" id="::ContactsWrapper::ContactError::TIMEOUT_ERROR">
        <webidl>            const unsigned short TIMEOUT_ERROR = 2;</webidl>
        <descriptive>
            <brief>
 The requested method timed out before it could be completed.
            </brief>
        </descriptive>
        <Type type="unsigned short"/>
      </Const>
      <Const name="PENDING_OPERATION_ERROR" value="3" id="::ContactsWrapper::ContactError::PENDING_OPERATION_ERROR">
        <webidl>            const unsigned short PENDING_OPERATION_ERROR = 3;</webidl>
        <descriptive>
            <brief>
 There is already a task in the device task source.
            </brief>
        </descriptive>
        <Type type="unsigned short"/>
      </Const>
      <Const name="IO_ERROR" value="4" id="::ContactsWrapper::ContactError::IO_ERROR">
        <webidl>            const unsigned short IO_ERROR = 4;</webidl>
        <descriptive>
            <brief>
 An error occurred in communication with the underlying implementation that meant the requested method could not complete.
            </brief>
        </descriptive>
        <Type type="unsigned short"/>
      </Const>
      <Const name="NOT_SUPPORTED_ERROR" value="5" id="::ContactsWrapper::ContactError::NOT_SUPPORTED_ERROR">
        <webidl>            const unsigned short NOT_SUPPORTED_ERROR = 5;</webidl>
        <descriptive>
            <brief>
 The requested method is not supported by the current implementation.
            </brief>
        </descriptive>
        <Type type="unsigned short"/>
      </Const>
      <Const name="PERMISSION_DENIED_ERROR" value="20" id="::ContactsWrapper::ContactError::PERMISSION_DENIED_ERROR">
        <webidl>            const unsigned short PERMISSION_DENIED_ERROR = 20;</webidl>
        <descriptive>
            <brief>
 Access to the requested information was denied by the implementation or by the user.
            </brief>
        </descriptive>
        <Type type="unsigned short"/>
      </Const>
      <Attribute readonly="readonly" name="code" id="::ContactsWrapper::ContactError::code">
        <webidl>            readonly attribute unsigned short code;</webidl>
        <descriptive>
            <brief>
 An error code assigned by an implementation when an error has occurred in Contacts API processing.
No exceptions.
            </brief>
        </descriptive>
        <Type type="unsigned short"/>
      </Attribute>
    </Interface>
    <Interface name="ServiceContacts" id="::ContactsWrapper::ServiceContacts">
      <webidl>        [NoInterfaceObject]&#13;
        interface ServiceContacts {&#13;
&#13;
                    readonly attribute <ref>Contacts</ref> contacts;&#13;
        };</webidl>
      <descriptive>
          <brief>
 The ServiceContacts interface is exposed on the Navigator object [NAVIGATOR]. Its goal is to provide an access point to the functionality in this specification. 
          </brief>
      </descriptive>
      <ExtendedAttributeList>
        <ExtendedAttribute name="NoInterfaceObject"/>
      </ExtendedAttributeList>
      <Attribute readonly="readonly" name="contacts" id="::ContactsWrapper::ServiceContacts::contacts">
        <webidl>                    readonly attribute <ref>Contacts</ref> contacts;</webidl>
        <descriptive>
            <brief>
 The object through which the contacts functionality can be accessed.
No exceptions.
            </brief>
        </descriptive>
        <Type name="Contacts"/>
      </Attribute>
    </Interface>
    <Interface name="Contacts" id="::ContactsWrapper::Contacts">
      <webidl>        [NoInterfaceObject]&#13;
        interface Contacts {&#13;
&#13;
&#13;
            caller void find (DOMString[] fields, <ref>ContactFindCB</ref> successCB, optional <ref>ContactErrorCB</ref> errorCB, optional <ref>ContactFindOptions</ref> options);&#13;
        };</webidl>
      <descriptive>
          <brief>
 The Contacts interface exposes a database of contact information that may be retrieved. 
          </brief>
         <description>
          <p>
Multiple contact groups can be represented within this unified address book by specifying consistent categories values as part of individual Contact objects. 
          </p>
          <p>
Multiple contact groups can be displayed by filtering on the required categories values via the Contacts find() operation. 
          </p>
          <p>
The ServiceContacts interface is exposed on the Navigator object [NAVIGATOR]. 
          </p>
          <p>
Its goal is to provide an access point to the functionality in this specification. 
          </p>
         </description>
      </descriptive>
      <ExtendedAttributeList>
        <ExtendedAttribute name="NoInterfaceObject"/>
      </ExtendedAttributeList>
      <Operation caller="caller" name="find" id="::ContactsWrapper::Contacts::find">
        <webidl>            caller void find (DOMString[] fields, <ref>ContactFindCB</ref> successCB, optional <ref>ContactErrorCB</ref> errorCB, optional <ref>ContactFindOptions</ref> options);</webidl>
        <descriptive>
            <brief>
 Find contacts in the address book according to the find contacts process detailed below. 
            </brief>
           <description>
            <p>
This method takes two, three or four arguments. When called, it starts the following find contacts process:
            </p>
            <p>
Let successCallback be the callback indicated by the method's second argument.
            </p>
            <p>
Let errorCallback be the callback indicated by the method's third argument, if any, or null otherwise.
            </p>
            <p>
If successCallback is null, then throw a TypeError (as defined in [WEBIDL]).
            </p>
            <p>
If there is a task from the device task source in one of the task queues (e.g. an existing find() operation is still pending a response), run these substeps:
            </p>
            <p>
If errorCallback is not null, let error be a ContactError object whose code attribute has the value PENDING_OPERATION_ERROR and queue a task to invoke errorCallback with error as its argument.
            </p>
            <p>
Abort this operation.
            </p>
            <p>
Return, and run the remaining steps asynchronously.
            </p>
            <p>
Let results be the array of Contact objects obtained by searching contacts in the address book according to the rules defined in Contact Search Processing, or null if the search has failed.
            </p>
            <p>
If results is null, run these substeps:
            </p>
            <p>
If errorCallback is not null, let error be a ContactError object whose code attribute has its value set according to the type of failure that occurred and queue a task to invoke errorCallback with error as its argument.
            </p>
            <p>
Abort this operation.
            </p>
            <p>
Queue a task to invoke successCallback with results as its argument.
            </p>
           </description>
        </descriptive>
        <Type type="void">
          <descriptive>
              <description><p>
 caller void                 
              </p></description>
          </descriptive>
        </Type>
        <ArgumentList>
          <Argument name="fields">
            <descriptive>
                <description><p>
 The search qualifier.
                </p></description>
            </descriptive>
            <Type type="array">
              <Type type="DOMString"/>
            </Type>
          </Argument>
          <Argument name="successCB">
            <descriptive>
                <description><p>
 Function to call when the asynchronous operation completes successfully.
                </p></description>
            </descriptive>
            <Type name="ContactFindCB"/>
          </Argument>
          <Argument optional="optional" name="errorCB">
            <descriptive>
                <description><p>
 Function to call when the asynchronous operation fails.
                </p></description>
            </descriptive>
            <Type name="ContactErrorCB"/>
          </Argument>
          <Argument optional="optional" name="options">
            <descriptive>
                <description><p>
 The options to apply to the output of this method.                                 
                </p></description>
            </descriptive>
            <Type name="ContactFindOptions"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="Contact" id="::ContactsWrapper::Contact">
      <webidl>        [NoInterfaceObject]&#13;
        interface Contact {&#13;
                        &#13;
&#13;
             readonly attribute DOMString              id;&#13;
&#13;
             attribute DOMString?             displayName;&#13;
&#13;
             attribute  <ref>ContactName</ref>           name;&#13;
&#13;
             attribute DOMString?             nickname;&#13;
&#13;
             attribute <ref>ContactField</ref>[]?        phoneNumbers;&#13;
&#13;
             attribute <ref>ContactField</ref>[]?        emails;&#13;
&#13;
             attribute <ref>ContactAddress</ref>[]?      addresses;&#13;
&#13;
             attribute <ref>ContactField</ref>[]?        ims;&#13;
&#13;
             attribute <ref>ContactOrganization</ref>[]? organizations;&#13;
&#13;
             attribute <ref>Date</ref>?                  revision;&#13;
&#13;
             attribute <ref>Date</ref>?                  birthday;&#13;
&#13;
             attribute DOMString?             gender;&#13;
&#13;
             attribute DOMString?             note;&#13;
&#13;
             attribute <ref>ContactField</ref>[]?        photos;&#13;
&#13;
             attribute DOMString[]?           categories;&#13;
&#13;
             attribute <ref>ContactField</ref>[]?        urls;&#13;
&#13;
             attribute DOMString?             timezone;&#13;
        };</webidl>
      <descriptive>
          <brief>
 The Contact interface captures the properties of a contact object. 
          </brief>
         <description>
          <p>
All Contact objects must include all attributes supported by the implementation, regardless of whether these attributes have been assigned a null value or not. If a supported attribute has not been assigned a value by the user or the implementation, then this attribute must still be present in the resulting Contact object and must have a value of null. 
          </p>
          <p>
Additional attributes may be included according to the provisions detailed in Extended Contact Properties and Parameters. If an extended attribute is supported by the current implementation and has not been assigned a value by the user or the implementation, then this extended attribute must still be present in the resulting Contact object and must have a value of null. 
          </p>
         </description>
      </descriptive>
      <ExtendedAttributeList>
        <ExtendedAttribute name="NoInterfaceObject"/>
      </ExtendedAttributeList>
      <Attribute readonly="readonly" name="id" id="::ContactsWrapper::Contact::id">
        <webidl>             readonly attribute DOMString              id;</webidl>
        <descriptive>
            <brief>
 A globally unique identifier for the given Contact object. 
            </brief>
           <description>
            <p>
Each Contact instance must include a non-empty id value.
            </p>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute name="displayName" id="::ContactsWrapper::Contact::displayName">
        <webidl>             attribute DOMString?             displayName;</webidl>
        <descriptive>
            <brief>
 This attribute contains the name of this Contact in a form that is suitable for display to the user.
            </brief>
           <description>
            <p>
Each Contact must include either a displayName or the name attribute. 
            </p>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="name" id="::ContactsWrapper::Contact::name">
        <webidl>             attribute  <ref>ContactName</ref>           name;</webidl>
        <descriptive>
            <brief>
 This attribute represents the full name of this Contact indicated by the name components associated with the ContactName object.
            </brief>
           <description>
            <p>
Each Contact must include either a displayName or the name attribute. 
            </p>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type name="ContactName"/>
      </Attribute>
      <Attribute name="nickname" id="::ContactsWrapper::Contact::nickname">
        <webidl>             attribute DOMString?             nickname;</webidl>
        <descriptive>
            <brief>
 This attribute contains the nickname (or a casual name) for this Contact. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="phoneNumbers" id="::ContactsWrapper::Contact::phoneNumbers">
        <webidl>             attribute <ref>ContactField</ref>[]?        phoneNumbers;</webidl>
        <descriptive>
            <brief>
 This attribute captures one or more phone numbers associated with this Contact. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="array" nullable="nullable">
          <Type name="ContactField"/>
        </Type>
      </Attribute>
      <Attribute name="emails" id="::ContactsWrapper::Contact::emails">
        <webidl>             attribute <ref>ContactField</ref>[]?        emails;</webidl>
        <descriptive>
            <brief>
 This attribute represents one or more email addresses associated with this Contact. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="array" nullable="nullable">
          <Type name="ContactField"/>
        </Type>
      </Attribute>
      <Attribute name="addresses" id="::ContactsWrapper::Contact::addresses">
        <webidl>             attribute <ref>ContactAddress</ref>[]?      addresses;</webidl>
        <descriptive>
            <brief>
 This attribute represents one or more physical addresses associated with this Contact. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="array" nullable="nullable">
          <Type name="ContactAddress"/>
        </Type>
      </Attribute>
      <Attribute name="ims" id="::ContactsWrapper::Contact::ims">
        <webidl>             attribute <ref>ContactField</ref>[]?        ims;</webidl>
        <descriptive>
            <brief>
 This attribute represents one or more instant messaging identifiers associated with this Contact. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="array" nullable="nullable">
          <Type name="ContactField"/>
        </Type>
      </Attribute>
      <Attribute name="organizations" id="::ContactsWrapper::Contact::organizations">
        <webidl>             attribute <ref>ContactOrganization</ref>[]? organizations;</webidl>
        <descriptive>
            <brief>
 This attribute represents one or more organizations associated with this Contact. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="array" nullable="nullable">
          <Type name="ContactOrganization"/>
        </Type>
      </Attribute>
      <Attribute name="revision" id="::ContactsWrapper::Contact::revision">
        <webidl>             attribute <ref>Date</ref>?                  revision;</webidl>
        <descriptive>
            <brief>
 This attribute contains the timestamp information associated with this Contact, which represents the last known modification time. If no modification time exists, then this object contains the timestamp of the object's creation time. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type name="Date" nullable="nullable"/>
      </Attribute>
      <Attribute name="birthday" id="::ContactsWrapper::Contact::birthday">
        <webidl>             attribute <ref>Date</ref>?                  birthday;</webidl>
        <descriptive>
            <brief>
     This attribute contains birthday of this Contact.
            </brief>
           <description>
            <p>
The year value may be set to 0000 when the age of the Contact is private or the year is not available.
            </p>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type name="Date" nullable="nullable"/>
      </Attribute>
      <Attribute name="gender" id="::ContactsWrapper::Contact::gender">
        <webidl>             attribute DOMString?             gender;</webidl>
        <descriptive>
            <brief>
 This attribute contains the gender of this Contact. This attribute should have one of the following values:
            </brief>
           <description>
            <p>
male
            </p>
            <p>
female
            </p>
            <p>
undisclosed
            </p>
            <p>
Note however that this attribute may contain a value not listed above. 
            </p>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="note" id="::ContactsWrapper::Contact::note">
        <webidl>             attribute DOMString?             note;</webidl>
        <descriptive>
            <brief>
 This attribute contains the personal notes (free-text) for this Contact that is managed by the user of the address book. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="photos" id="::ContactsWrapper::Contact::photos">
        <webidl>             attribute <ref>ContactField</ref>[]?        photos;</webidl>
        <descriptive>
            <brief>
 This attribute represents one or more photos associated with this Contact.
            </brief>
           <description>
            <p>
The photos must be specified in the value attribute of the ContactField object either by using a URL to an image resource or base64 encoded string of the image data. 
            </p>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="array" nullable="nullable">
          <Type name="ContactField"/>
        </Type>
      </Attribute>
      <Attribute name="categories" id="::ContactsWrapper::Contact::categories">
        <webidl>             attribute DOMString[]?           categories;</webidl>
        <descriptive>
            <brief>
 This attribute contains one or more user-defined categories/tags/labels associated with this Contact. e.g. &quot;family&quot;, &quot;favourite&quot;, &quot;cryptozoologists&quot;. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="array" nullable="nullable">
          <Type type="DOMString"/>
        </Type>
      </Attribute>
      <Attribute name="urls" id="::ContactsWrapper::Contact::urls">
        <webidl>             attribute <ref>ContactField</ref>[]?        urls;</webidl>
        <descriptive>
            <brief>
 This attribute represents one or more URLs associated with this Contact e.g. personal web page, blog.
            </brief>
           <description>
            <p>
The web resources must be specified using the value attribute of the ContactField object, and its type field may be set to &quot;blog&quot; or &quot;profile&quot;. 
            </p>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="array" nullable="nullable">
          <Type name="ContactField"/>
        </Type>
      </Attribute>
      <Attribute name="timezone" id="::ContactsWrapper::Contact::timezone">
        <webidl>             attribute DOMString?             timezone;</webidl>
        <descriptive>
            <brief>
 This attribute represents the time zone of this Contact.
            </brief>
           <description>
            <p>
It is recommended that names from the public-domain Olson database [TZDB] will be used as the value of this attribute, but this is not a restriction. For example, a value of America/New_York indicates the Contact is associated with the variable time zone of the New York region of the United States, including daylight saving time offsets experienced in that region.
            </p>
            <p>
It is also possible to use this attribute to express the timezone as a positive or negative difference from UTC, in the 24-hour clock, in units of hours and minutes (i.e. +hh:mm). For example, a value of +05:30 indicates the Contact is associated with a fixed time zone of GMT+05:30. 
            </p>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
    </Interface>
    <Interface name="ContactName" id="::ContactsWrapper::ContactName">
      <webidl>      [NoInterfaceObject]&#13;
        interface ContactName {&#13;
&#13;
            attribute DOMString? formatted;&#13;
&#13;
            attribute DOMString? familyName;&#13;
&#13;
            attribute DOMString? givenName;&#13;
&#13;
            attribute DOMString? middleName;&#13;
&#13;
            attribute DOMString? honorificPrefix;&#13;
&#13;
            attribute DOMString? honorificSuffix;&#13;
        };</webidl>
      <descriptive>
          <brief>
 The ContactName interface describes a contact's name. 
          </brief>
      </descriptive>
      <ExtendedAttributeList>
        <ExtendedAttribute name="NoInterfaceObject"/>
      </ExtendedAttributeList>
      <Attribute name="formatted" id="::ContactsWrapper::ContactName::formatted">
        <webidl>            attribute DOMString? formatted;</webidl>
        <descriptive>
            <brief>
 This attribute contains the full name, including all the individual components such as givenName, middleName, familyName, prefix, suffix as appropriate for the user's culture, and formatted for display (e.g. Mr. Joe Smith Jr). 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="familyName" id="::ContactsWrapper::ContactName::familyName">
        <webidl>            attribute DOMString? familyName;</webidl>
        <descriptive>
            <brief>
 This attribute contains the family name (also referred to as the last name) of this Contact. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="givenName" id="::ContactsWrapper::ContactName::givenName">
        <webidl>            attribute DOMString? givenName;</webidl>
        <descriptive>
            <brief>
 This attribute contains the given name (also referred to as the first name) of this Contact. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="middleName" id="::ContactsWrapper::ContactName::middleName">
        <webidl>            attribute DOMString? middleName;</webidl>
        <descriptive>
            <brief>
 This attribute contains the middle name of this Contact. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="honorificPrefix" id="::ContactsWrapper::ContactName::honorificPrefix">
        <webidl>            attribute DOMString? honorificPrefix;</webidl>
        <descriptive>
            <brief>
 This attribute contains the honorific prefix (or title) of this Contact. E.g. Mr., Dr., Ms., Mrs. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="honorificSuffix" id="::ContactsWrapper::ContactName::honorificSuffix">
        <webidl>            attribute DOMString? honorificSuffix;</webidl>
        <descriptive>
            <brief>
 This attribute contains the honorific suffix of this Contact. E.g. Jr, III, Sr. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
    </Interface>
    <Interface name="ContactField" id="::ContactsWrapper::ContactField">
      <webidl>        [NoInterfaceObject]&#13;
        interface ContactField {&#13;
&#13;
            attribute DOMString  type;&#13;
&#13;
            attribute DOMString? value;&#13;
&#13;
            attribute boolean    pref;&#13;
        };</webidl>
      <descriptive>
          <brief>
 The ContactField interface is a reusable component that is used to capture contact fields of the Contact interface that have some modicum of structure. 
          </brief>
      </descriptive>
      <ExtendedAttributeList>
        <ExtendedAttribute name="NoInterfaceObject"/>
      </ExtendedAttributeList>
      <Attribute name="type" id="::ContactsWrapper::ContactField::type">
        <webidl>            attribute DOMString  type;</webidl>
        <descriptive>
            <brief>
 This attribute contains the type information for this ContactField and its content varies subject to the contact property this ContactField is representing. For example, if the ContactField is representing a phoneNumber property, the type attribute can be set to home, mobile; if the ContactField is representing the ims property, the type attribute could be set to xmpp, irc, bbm, etc. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute name="value" id="::ContactsWrapper::ContactField::value">
        <webidl>            attribute DOMString? value;</webidl>
        <descriptive>
            <brief>
 This attribute contains the value for this ContactField and its content varies subject to the contact property this ContactField is representing. For example, if the ContactField is representing an email, the value attribute could be set to JoeSmith@example.com, and if the ContactField is representing a url, the value attribute can be set to http://www.example.org/joesmith, etc. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="pref" id="::ContactsWrapper::ContactField::pref">
        <webidl>            attribute boolean    pref;</webidl>
        <descriptive>
            <brief>
 This attribute indicates whether this instance of the ContactField is the preferred, or primary, value for the contact property this ContactField is representing in the Contact interface. By default, the value is false. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="boolean"/>
      </Attribute>
    </Interface>
    <Interface name="ContactAddress" id="::ContactsWrapper::ContactAddress">
      <webidl>        [NoInterfaceObject]&#13;
        interface ContactAddress {&#13;
&#13;
            attribute boolean    pref;&#13;
&#13;
            attribute DOMString? type;&#13;
&#13;
            attribute DOMString? formatted;&#13;
&#13;
            attribute DOMString? streetAddress;&#13;
&#13;
            attribute DOMString? locality;&#13;
&#13;
            attribute DOMString? region;&#13;
&#13;
            attribute DOMString? postalCode;&#13;
&#13;
            attribute DOMString? country;&#13;
        };</webidl>
      <descriptive>
          <brief>
 The ContactAddress interface is a reusable component that is used to capture addresses within the Contact interface. 
          </brief>
      </descriptive>
      <ExtendedAttributeList>
        <ExtendedAttribute name="NoInterfaceObject"/>
      </ExtendedAttributeList>
      <Attribute name="pref" id="::ContactsWrapper::ContactAddress::pref">
        <webidl>            attribute boolean    pref;</webidl>
        <descriptive>
            <brief>
 This attribute indicates whether this instance of the ContactAddress is the preferred, or primary, value for the contact. By default, the value is false. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="boolean"/>
      </Attribute>
      <Attribute name="type" id="::ContactsWrapper::ContactAddress::type">
        <webidl>            attribute DOMString? type;</webidl>
        <descriptive>
            <brief>
 This attribute contains the type of address this object is representing (e.g. work, home, premises, etc). 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="formatted" id="::ContactsWrapper::ContactAddress::formatted">
        <webidl>            attribute DOMString? formatted;</webidl>
        <descriptive>
            <brief>
 This attribute contains the full physical address including street, locality, region, postalCode, and country as appropriate, and formatted for display. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="streetAddress" id="::ContactsWrapper::ContactAddress::streetAddress">
        <webidl>            attribute DOMString? streetAddress;</webidl>
        <descriptive>
            <brief>
 This attribute contains the street address corresponding to this ContactAddress. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="locality" id="::ContactsWrapper::ContactAddress::locality">
        <webidl>            attribute DOMString? locality;</webidl>
        <descriptive>
            <brief>
 This attribute contains the locality (or city) name corresponding to this ContactAddress. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="region" id="::ContactsWrapper::ContactAddress::region">
        <webidl>            attribute DOMString? region;</webidl>
        <descriptive>
            <brief>
 This attribute contains the region (or state/province) name corresponding to this ContactAddress. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="postalCode" id="::ContactsWrapper::ContactAddress::postalCode">
        <webidl>            attribute DOMString? postalCode;</webidl>
        <descriptive>
            <brief>
 This attribute contains the postal code (or zip) corresponding to this ContactAddress. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="country" id="::ContactsWrapper::ContactAddress::country">
        <webidl>            attribute DOMString? country;</webidl>
        <descriptive>
            <brief>
 This attribute contains the country name corresponding to this ContactAddress. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
    </Interface>
    <Interface name="ContactOrganization" id="::ContactsWrapper::ContactOrganization">
      <webidl>     [NoInterfaceObject]&#13;
        interface ContactOrganization {&#13;
&#13;
            attribute boolean    pref;&#13;
&#13;
            attribute DOMString? type;&#13;
&#13;
            attribute DOMString? name;&#13;
&#13;
            attribute DOMString? department;&#13;
&#13;
            attribute DOMString? title;&#13;
        };</webidl>
      <descriptive>
          <brief>
 The ContactOrganization interface is a reusable component that is used to support contact organisations within the Contact interface. 
          </brief>
      </descriptive>
      <ExtendedAttributeList>
        <ExtendedAttribute name="NoInterfaceObject"/>
      </ExtendedAttributeList>
      <Attribute name="pref" id="::ContactsWrapper::ContactOrganization::pref">
        <webidl>            attribute boolean    pref;</webidl>
        <descriptive>
            <brief>
 This attribute indicates whether this instance of the ContactOrganization is the preferred, or primary, value for the contact. By default, the value is false. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="boolean"/>
      </Attribute>
      <Attribute name="type" id="::ContactsWrapper::ContactOrganization::type">
        <webidl>            attribute DOMString? type;</webidl>
        <descriptive>
            <brief>
 This attribute contains the type of organization this object is representing. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="name" id="::ContactsWrapper::ContactOrganization::name">
        <webidl>            attribute DOMString? name;</webidl>
        <descriptive>
            <brief>
 The name of the organisation. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="department" id="::ContactsWrapper::ContactOrganization::department">
        <webidl>            attribute DOMString? department;</webidl>
        <descriptive>
            <brief>
 The department within which this Contact works. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="title" id="::ContactsWrapper::ContactOrganization::title">
        <webidl>            attribute DOMString? title;</webidl>
        <descriptive>
            <brief>
 The job title that the Contact holds inside this organisation. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
    </Interface>
    <Interface name="ContactFindOptions" id="::ContactsWrapper::ContactFindOptions">
      <webidl>        [NoInterfaceObject]&#13;
        interface ContactFindOptions {&#13;
&#13;
            attribute DOMString? filter;&#13;
&#13;
            attribute boolean?   multiple;&#13;
&#13;
            attribute <ref>Date</ref>      updatedSince;&#13;
        };</webidl>
      <descriptive>
          <brief>
 The ContactFindOptions interface describes the options that can be applied to contact searching. When a ContactFindOptions parameter is provided to the Contacts find() operation, it should be processed according to the provisions detailed in Options Processing. 
          </brief>
      </descriptive>
      <ExtendedAttributeList>
        <ExtendedAttribute name="NoInterfaceObject"/>
      </ExtendedAttributeList>
      <Attribute name="filter" id="::ContactsWrapper::ContactFindOptions::filter">
        <webidl>            attribute DOMString? filter;</webidl>
        <descriptive>
            <brief>
 A string-based search filter which provides a hint to the user agent to facilitate contacts selection by the user. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="multiple" id="::ContactsWrapper::ContactFindOptions::multiple">
        <webidl>            attribute boolean?   multiple;</webidl>
        <descriptive>
            <brief>
 A boolean value to indicate whether multiple Contact objects are wanted as part of the Contacts find() operation. By default this option is set to false. 
            </brief>
           <description>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type type="boolean" nullable="nullable"/>
      </Attribute>
      <Attribute name="updatedSince" id="::ContactsWrapper::ContactFindOptions::updatedSince">
        <webidl>            attribute <ref>Date</ref>      updatedSince;</webidl>
        <descriptive>
            <brief>
 Return only contact records that have been updated on or after the given time, specified as an ECMAScript Date object.
            </brief>
           <description>
            <p>
This filter is applied to the revision field as defined in Contact. 
            </p>
            <p>
No exceptions.
            </p>
           </description>
        </descriptive>
        <Type name="Date"/>
      </Attribute>
    </Interface>
    <Interface name="ContactFindCB" id="::ContactsWrapper::ContactFindCB">
      <webidl>        [Callback=FunctionOnly, NoInterfaceObject]&#13;
        interface ContactFindCB {        &#13;
&#13;
            void onsuccess (<ref>Contact</ref>[] contactObjs);&#13;
        };</webidl>
      <descriptive>
          <brief>
 This is the wrapper interface for callbacks indicating success of the find() operation. 
          </brief>
      </descriptive>
      <ExtendedAttributeList>
        <ExtendedAttribute name="Callback" value="FunctionOnly"/>
        <ExtendedAttribute name="NoInterfaceObject"/>
      </ExtendedAttributeList>
      <Operation name="onsuccess" id="::ContactsWrapper::ContactFindCB::onsuccess">
        <webidl>            void onsuccess (<ref>Contact</ref>[] contactObjs);</webidl>
        <descriptive>
            <brief>
 Callback on success of a find() operation
            </brief>
        </descriptive>
        <Type type="void">
          <descriptive>
              <description><p>
 void                 
              </p></description>
          </descriptive>
        </Type>
        <ArgumentList>
          <Argument name="contactObjs">
            <descriptive>
                <description><p>
 An array of Contact objects resulting from the given Contacts find() operation. 
                </p></description>
            </descriptive>
            <Type type="array">
              <Type name="Contact"/>
            </Type>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="ContactErrorCB" id="::ContactsWrapper::ContactErrorCB">
      <webidl>        [Callback=FunctionOnly, NoInterfaceObject]&#13;
        interface ContactErrorCB  {        &#13;
&#13;
              void onerror (<ref>ContactError</ref> error);&#13;
        };</webidl>
      <descriptive>
          <brief>
 This is the wrapper interface for callbacks indicating failure  of the find() operation. 
          </brief>
      </descriptive>
      <ExtendedAttributeList>
        <ExtendedAttribute name="Callback" value="FunctionOnly"/>
        <ExtendedAttribute name="NoInterfaceObject"/>
      </ExtendedAttributeList>
      <Operation name="onerror" id="::ContactsWrapper::ContactErrorCB::onerror">
        <webidl>              void onerror (<ref>ContactError</ref> error);</webidl>
        <descriptive>
            <brief>
 Callback on failure  of a find() operation
            </brief>
        </descriptive>
        <Type type="void">
          <descriptive>
              <description><p>
 void                 
              </p></description>
          </descriptive>
        </Type>
        <ArgumentList>
          <Argument name="error">
            <descriptive>
                <description><p>
 The ContactError object capturing the type of the error.
                </p></description>
            </descriptive>
            <Type name="ContactError"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
  </Module>
</Definitions>
